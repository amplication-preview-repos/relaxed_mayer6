/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SmartContract as PrismaSmartContract } from "@prisma/client";

export class SmartContractServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SmartContractCountArgs, "select">
  ): Promise<number> {
    return this.prisma.smartContract.count(args);
  }

  async smartContracts(
    args: Prisma.SmartContractFindManyArgs
  ): Promise<PrismaSmartContract[]> {
    return this.prisma.smartContract.findMany(args);
  }
  async smartContract(
    args: Prisma.SmartContractFindUniqueArgs
  ): Promise<PrismaSmartContract | null> {
    return this.prisma.smartContract.findUnique(args);
  }
  async createSmartContract(
    args: Prisma.SmartContractCreateArgs
  ): Promise<PrismaSmartContract> {
    return this.prisma.smartContract.create(args);
  }
  async updateSmartContract(
    args: Prisma.SmartContractUpdateArgs
  ): Promise<PrismaSmartContract> {
    return this.prisma.smartContract.update(args);
  }
  async deleteSmartContract(
    args: Prisma.SmartContractDeleteArgs
  ): Promise<PrismaSmartContract> {
    return this.prisma.smartContract.delete(args);
  }
}

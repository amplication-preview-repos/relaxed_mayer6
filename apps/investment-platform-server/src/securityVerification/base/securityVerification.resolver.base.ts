/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SecurityVerification } from "./SecurityVerification";
import { SecurityVerificationCountArgs } from "./SecurityVerificationCountArgs";
import { SecurityVerificationFindManyArgs } from "./SecurityVerificationFindManyArgs";
import { SecurityVerificationFindUniqueArgs } from "./SecurityVerificationFindUniqueArgs";
import { CreateSecurityVerificationArgs } from "./CreateSecurityVerificationArgs";
import { UpdateSecurityVerificationArgs } from "./UpdateSecurityVerificationArgs";
import { DeleteSecurityVerificationArgs } from "./DeleteSecurityVerificationArgs";
import { SecurityVerificationService } from "../securityVerification.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SecurityVerification)
export class SecurityVerificationResolverBase {
  constructor(
    protected readonly service: SecurityVerificationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SecurityVerification",
    action: "read",
    possession: "any",
  })
  async _securityVerificationsMeta(
    @graphql.Args() args: SecurityVerificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SecurityVerification])
  @nestAccessControl.UseRoles({
    resource: "SecurityVerification",
    action: "read",
    possession: "any",
  })
  async securityVerifications(
    @graphql.Args() args: SecurityVerificationFindManyArgs
  ): Promise<SecurityVerification[]> {
    return this.service.securityVerifications(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SecurityVerification, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SecurityVerification",
    action: "read",
    possession: "own",
  })
  async securityVerification(
    @graphql.Args() args: SecurityVerificationFindUniqueArgs
  ): Promise<SecurityVerification | null> {
    const result = await this.service.securityVerification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SecurityVerification)
  @nestAccessControl.UseRoles({
    resource: "SecurityVerification",
    action: "create",
    possession: "any",
  })
  async createSecurityVerification(
    @graphql.Args() args: CreateSecurityVerificationArgs
  ): Promise<SecurityVerification> {
    return await this.service.createSecurityVerification({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SecurityVerification)
  @nestAccessControl.UseRoles({
    resource: "SecurityVerification",
    action: "update",
    possession: "any",
  })
  async updateSecurityVerification(
    @graphql.Args() args: UpdateSecurityVerificationArgs
  ): Promise<SecurityVerification | null> {
    try {
      return await this.service.updateSecurityVerification({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SecurityVerification)
  @nestAccessControl.UseRoles({
    resource: "SecurityVerification",
    action: "delete",
    possession: "any",
  })
  async deleteSecurityVerification(
    @graphql.Args() args: DeleteSecurityVerificationArgs
  ): Promise<SecurityVerification | null> {
    try {
      return await this.service.deleteSecurityVerification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

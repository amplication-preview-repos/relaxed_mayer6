/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Investment } from "./Investment";
import { InvestmentCountArgs } from "./InvestmentCountArgs";
import { InvestmentFindManyArgs } from "./InvestmentFindManyArgs";
import { InvestmentFindUniqueArgs } from "./InvestmentFindUniqueArgs";
import { CreateInvestmentArgs } from "./CreateInvestmentArgs";
import { UpdateInvestmentArgs } from "./UpdateInvestmentArgs";
import { DeleteInvestmentArgs } from "./DeleteInvestmentArgs";
import { InvestmentService } from "../investment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Investment)
export class InvestmentResolverBase {
  constructor(
    protected readonly service: InvestmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "read",
    possession: "any",
  })
  async _investmentsMeta(
    @graphql.Args() args: InvestmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Investment])
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "read",
    possession: "any",
  })
  async investments(
    @graphql.Args() args: InvestmentFindManyArgs
  ): Promise<Investment[]> {
    return this.service.investments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Investment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "read",
    possession: "own",
  })
  async investment(
    @graphql.Args() args: InvestmentFindUniqueArgs
  ): Promise<Investment | null> {
    const result = await this.service.investment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Investment)
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "create",
    possession: "any",
  })
  async createInvestment(
    @graphql.Args() args: CreateInvestmentArgs
  ): Promise<Investment> {
    return await this.service.createInvestment({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Investment)
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "update",
    possession: "any",
  })
  async updateInvestment(
    @graphql.Args() args: UpdateInvestmentArgs
  ): Promise<Investment | null> {
    try {
      return await this.service.updateInvestment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Investment)
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "delete",
    possession: "any",
  })
  async deleteInvestment(
    @graphql.Args() args: DeleteInvestmentArgs
  ): Promise<Investment | null> {
    try {
      return await this.service.deleteInvestment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

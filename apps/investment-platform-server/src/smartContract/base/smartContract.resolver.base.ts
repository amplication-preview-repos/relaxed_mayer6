/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SmartContract } from "./SmartContract";
import { SmartContractCountArgs } from "./SmartContractCountArgs";
import { SmartContractFindManyArgs } from "./SmartContractFindManyArgs";
import { SmartContractFindUniqueArgs } from "./SmartContractFindUniqueArgs";
import { CreateSmartContractArgs } from "./CreateSmartContractArgs";
import { UpdateSmartContractArgs } from "./UpdateSmartContractArgs";
import { DeleteSmartContractArgs } from "./DeleteSmartContractArgs";
import { SmartContractService } from "../smartContract.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SmartContract)
export class SmartContractResolverBase {
  constructor(
    protected readonly service: SmartContractService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SmartContract",
    action: "read",
    possession: "any",
  })
  async _smartContractsMeta(
    @graphql.Args() args: SmartContractCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SmartContract])
  @nestAccessControl.UseRoles({
    resource: "SmartContract",
    action: "read",
    possession: "any",
  })
  async smartContracts(
    @graphql.Args() args: SmartContractFindManyArgs
  ): Promise<SmartContract[]> {
    return this.service.smartContracts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SmartContract, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SmartContract",
    action: "read",
    possession: "own",
  })
  async smartContract(
    @graphql.Args() args: SmartContractFindUniqueArgs
  ): Promise<SmartContract | null> {
    const result = await this.service.smartContract(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SmartContract)
  @nestAccessControl.UseRoles({
    resource: "SmartContract",
    action: "create",
    possession: "any",
  })
  async createSmartContract(
    @graphql.Args() args: CreateSmartContractArgs
  ): Promise<SmartContract> {
    return await this.service.createSmartContract({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SmartContract)
  @nestAccessControl.UseRoles({
    resource: "SmartContract",
    action: "update",
    possession: "any",
  })
  async updateSmartContract(
    @graphql.Args() args: UpdateSmartContractArgs
  ): Promise<SmartContract | null> {
    try {
      return await this.service.updateSmartContract({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SmartContract)
  @nestAccessControl.UseRoles({
    resource: "SmartContract",
    action: "delete",
    possession: "any",
  })
  async deleteSmartContract(
    @graphql.Args() args: DeleteSmartContractArgs
  ): Promise<SmartContract | null> {
    try {
      return await this.service.deleteSmartContract(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
